// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// quickPredict
Eigen::VectorXd quickPredict(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> beta, const Eigen::Map<Eigen::MatrixXd> ranX, const Eigen::MappedSparseMatrix<double> A, const Rcpp::IntegerVector cohort, const Rcpp::IntegerVector ranXind);
RcppExport SEXP _barrierALK_quickPredict(SEXP XSEXP, SEXP betaSEXP, SEXP ranXSEXP, SEXP ASEXP, SEXP cohortSEXP, SEXP ranXindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type ranX(ranXSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type ranXind(ranXindSEXP);
    rcpp_result_gen = Rcpp::wrap(quickPredict(X, beta, ranX, A, cohort, ranXind));
    return rcpp_result_gen;
END_RCPP
}
// quickPredictAR
Eigen::VectorXd quickPredictAR(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> beta, const Eigen::Map<Eigen::MatrixXd> Xr, const Eigen::MappedSparseMatrix<double> A, const Rcpp::IntegerVector cohort, const Rcpp::IntegerVector year, const Rcpp::IntegerMatrix ageTimeKey);
RcppExport SEXP _barrierALK_quickPredictAR(SEXP XSEXP, SEXP betaSEXP, SEXP XrSEXP, SEXP ASEXP, SEXP cohortSEXP, SEXP yearSEXP, SEXP ageTimeKeySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type ageTimeKey(ageTimeKeySEXP);
    rcpp_result_gen = Rcpp::wrap(quickPredictAR(X, beta, Xr, A, cohort, year, ageTimeKey));
    return rcpp_result_gen;
END_RCPP
}
// quickPredictB
Eigen::VectorXd quickPredictB(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> beta);
RcppExport SEXP _barrierALK_quickPredictB(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(quickPredictB(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// predict_probs
Eigen::MatrixXd predict_probs(Eigen::VectorXd etas, int ages, int p_type);
RcppExport SEXP _barrierALK_predict_probs(SEXP etasSEXP, SEXP agesSEXP, SEXP p_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< int >::type ages(agesSEXP);
    Rcpp::traits::input_parameter< int >::type p_type(p_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_probs(etas, ages, p_type));
    return rcpp_result_gen;
END_RCPP
}
// predict_full
Eigen::MatrixXd predict_full(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> beta, const Eigen::Map<Eigen::MatrixXd> ranX, const Eigen::MappedSparseMatrix<double> A, const Rcpp::IntegerVector cohort, const Rcpp::IntegerVector ranXind, int ages, int p_type);
RcppExport SEXP _barrierALK_predict_full(SEXP XSEXP, SEXP betaSEXP, SEXP ranXSEXP, SEXP ASEXP, SEXP cohortSEXP, SEXP ranXindSEXP, SEXP agesSEXP, SEXP p_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type ranX(ranXSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type ranXind(ranXindSEXP);
    Rcpp::traits::input_parameter< int >::type ages(agesSEXP);
    Rcpp::traits::input_parameter< int >::type p_type(p_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_full(X, beta, ranX, A, cohort, ranXind, ages, p_type));
    return rcpp_result_gen;
END_RCPP
}
// predict_full_AR
Eigen::MatrixXd predict_full_AR(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> beta, const Eigen::Map<Eigen::MatrixXd> Xr, const Eigen::MappedSparseMatrix<double> A, const Rcpp::IntegerVector cohort, const Rcpp::IntegerVector year, const Rcpp::IntegerMatrix ageTimeKey, int ages, int p_type);
RcppExport SEXP _barrierALK_predict_full_AR(SEXP XSEXP, SEXP betaSEXP, SEXP XrSEXP, SEXP ASEXP, SEXP cohortSEXP, SEXP yearSEXP, SEXP ageTimeKeySEXP, SEXP agesSEXP, SEXP p_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type ageTimeKey(ageTimeKeySEXP);
    Rcpp::traits::input_parameter< int >::type ages(agesSEXP);
    Rcpp::traits::input_parameter< int >::type p_type(p_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_full_AR(X, beta, Xr, A, cohort, year, ageTimeKey, ages, p_type));
    return rcpp_result_gen;
END_RCPP
}
// predict_fullB
Eigen::MatrixXd predict_fullB(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> beta, int ages, int p_type);
RcppExport SEXP _barrierALK_predict_fullB(SEXP XSEXP, SEXP betaSEXP, SEXP agesSEXP, SEXP p_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type ages(agesSEXP);
    Rcpp::traits::input_parameter< int >::type p_type(p_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_fullB(X, beta, ages, p_type));
    return rcpp_result_gen;
END_RCPP
}
// age_fishB
Eigen::MatrixXd age_fishB(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> beta, int ages, const Eigen::Map<Eigen::MatrixXd> lf, int lblen);
RcppExport SEXP _barrierALK_age_fishB(SEXP XSEXP, SEXP betaSEXP, SEXP agesSEXP, SEXP lfSEXP, SEXP lblenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type ages(agesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type lf(lfSEXP);
    Rcpp::traits::input_parameter< int >::type lblen(lblenSEXP);
    rcpp_result_gen = Rcpp::wrap(age_fishB(X, beta, ages, lf, lblen));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_barrierALK_quickPredict", (DL_FUNC) &_barrierALK_quickPredict, 6},
    {"_barrierALK_quickPredictAR", (DL_FUNC) &_barrierALK_quickPredictAR, 7},
    {"_barrierALK_quickPredictB", (DL_FUNC) &_barrierALK_quickPredictB, 2},
    {"_barrierALK_predict_probs", (DL_FUNC) &_barrierALK_predict_probs, 3},
    {"_barrierALK_predict_full", (DL_FUNC) &_barrierALK_predict_full, 8},
    {"_barrierALK_predict_full_AR", (DL_FUNC) &_barrierALK_predict_full_AR, 9},
    {"_barrierALK_predict_fullB", (DL_FUNC) &_barrierALK_predict_fullB, 4},
    {"_barrierALK_age_fishB", (DL_FUNC) &_barrierALK_age_fishB, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_barrierALK(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
